{"version":3,"sources":["app/home/home.js","app/aboutme/aboutme.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","switchText","slidingText","document","getElementById","state","textIndex","textArray","length","setState","classList","add","remove","setTimeout","textToShow","querySelector","this","textTimer","setInterval","clearInterval","className","id","React","Component","AboutMe","App","Navbar","bg","collapseOnSelect","expand","variant","fixed","Brand","to","Toggle","aria-controls","Collapse","Nav","Link","href","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAgEeA,G,wDA5Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmBRC,WAAa,WACX,IAAIC,EAAcC,SAASC,eAAe,gBAEtC,EAAKC,MAAMC,WAAa,EAAKD,MAAME,UAAUC,OAAS,EACxD,EAAKC,SAAS,CACZH,UAAW,IAGb,EAAKG,SAAS,CACZH,UAAW,EAAKD,MAAMC,UAAY,IAItCJ,EAAYQ,UAAUC,IAAI,YAC1BT,EAAYQ,UAAUE,OAAO,WAG7BC,YAAW,WACT,EAAKJ,SAAS,CACZK,WAAY,EAAKT,MAAME,UAAU,EAAKF,MAAMC,aAE9CJ,EAAYQ,UAAUC,IAAI,WAC1BT,EAAYQ,UAAUE,OAAO,cAC5B,MAxCH,EAAKP,MAAQ,CACXE,UAAW,CAAC,YAAa,WAAY,oBACrCO,WAAY,YACZR,UAAW,GANI,E,gEAWjBH,SAASY,cAAc,QAAQL,UAAUC,IAAI,aAC7CK,KAAKC,UAAYC,YAAYF,KAAKf,WAAY,O,6CAI9CE,SAASY,cAAc,QAAQL,UAAUE,OAAO,aAChDO,cAAcH,KAAKC,a,+BA8BnB,OACE,yBAAKG,UAAU,8BACb,yBAAKA,UAAU,oBACb,2CACA,wBAAIC,GAAG,eAAeD,UAAU,WAC7BJ,KAAKX,MAAMS,kB,GArDLQ,IAAMC,YCSVC,EAVC,WACd,OACE,yBAAKJ,UAAU,kBACb,yBAAKA,UAAU,mBACb,2C,gCC6COK,MArCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKL,UAAU,YACb,kBAACM,EAAA,EAAD,CACEC,GAAG,cACHC,kBAAgB,EAChBC,OAAO,KACPC,QAAQ,OACRC,MAAM,OACN,kBAACL,EAAA,EAAOM,MAAR,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,kBAEF,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBf,GAAG,yBAClB,kBAACgB,EAAA,EAAD,CAAKjB,UAAU,WACb,kBAACiB,EAAA,EAAIC,KAAL,KACE,kBAAC,IAAD,CAAML,GAAG,aAAT,aAEF,kBAACI,EAAA,EAAIC,KAAL,CAAUC,KAAK,aAAf,YACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,SAAf,WAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WC/BQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAASC,eAAe,SDsHpB,kBAAmB6C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5cac8a41.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../../assets/css/style.css\";\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      textArray: [\"Developer\", \"Marketer\", \"Graphic Designer\"],\r\n      textToShow: \"Developer\",\r\n      textIndex: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.querySelector(\"html\").classList.add(\"home-page\");\r\n    this.textTimer = setInterval(this.switchText, 8000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.querySelector(\"html\").classList.remove(\"home-page\");\r\n    clearInterval(this.textTimer);\r\n  }\r\n  // this code animates the text at the bottom of the main title\r\n  switchText = () => {\r\n    var slidingText = document.getElementById(\"sliding-text\");\r\n    // keep track of the index\r\n    if (this.state.textIndex >= this.state.textArray.length - 1) {\r\n      this.setState({\r\n        textIndex: 0,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        textIndex: this.state.textIndex + 1,\r\n      });\r\n    }\r\n    // Add class to make it disappear\r\n    slidingText.classList.add(\"fade-out\");\r\n    slidingText.classList.remove(\"fade-in\");\r\n\r\n    // Only change index when the\r\n    setTimeout(() => {\r\n      this.setState({\r\n        textToShow: this.state.textArray[this.state.textIndex],\r\n      });\r\n      slidingText.classList.add(\"fade-in\");\r\n      slidingText.classList.remove(\"fade-out\");\r\n    }, 2000);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"home-slider fade-in-faster\">\r\n        <div className=\"home-slider-text\">\r\n          <h1>Chota Mpuku</h1>\r\n          <h3 id=\"sliding-text\" className=\"fade-in\">\r\n            {this.state.textToShow}\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst AboutMe = () => {\r\n  return (\r\n    <div className=\"fade-in-faster\">\r\n      <div className=\"top-banner-area\">\r\n        <h1>About me</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutMe;\r\n","import React from \"react\";\n\n// COmponents\nimport Home from \"./app/home/home\";\nimport AboutMe from \"./app/aboutme/aboutme\";\n\n// Bootstrap\nimport \"./assets/css/style.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\n// React Router\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app-area\">\n        <Navbar\n          bg=\"transparent\"\n          collapseOnSelect\n          expand=\"lg\"\n          variant=\"dark\"\n          fixed=\"top\">\n          <Navbar.Brand>\n            <Link to=\"/\">Chota H Mpuku</Link>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link>\n                <Link to=\"/about-me\">About Me</Link>\n              </Nav.Link>\n              <Nav.Link href=\"#projects\">Projects</Nav.Link>\n              <Nav.Link href=\"#blog\">Blog</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Switch>\n          <Route path=\"/about-me\">\n            <AboutMe />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Bootstrap\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}